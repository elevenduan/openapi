import merge from "lodash/merge";
{{ importRequest }}
{% if isHook %}{{ importUseRequest }}{% endif %}

type Config = {[key: string]: any};

function mergeRequestConfig(...config: Config[]) {
	return merge({{ globalRequestConfig }}, ...config);
}

function mergeHookConfig(...config: Config[]) {
	return merge({{ globalHookConfig }}, ...config);
}

{% for api in apiJson %}
	/** {{ api.description }} {{ api.method | upper }} {{ api.url | safe }} */
    export async function {{ api.name }} (
		{% if api.params %}params: { {{api.params | join(";", "type") }} },{% endif %}
		{% if api.data %}data: {{api.data.type}},{% endif %}
		reqConfig?: Config
    ) {
		return request({
			url: "{{api.url}}",
			method: "{{api.method}}",
			{% if api.params %}params,{% endif %}
			{% if api.data %}data,{% endif %}
			...mergeRequestConfig(
				{% if api.contentType %}{headers: {"Content-Type": "{{ api.contentType }}"}},{% endif %}
				{% if api.response.responseType %}{responseType: "{{ api.response.responseType }}"},{% endif %}
				(reqConfig || {}),
			)
		});
    }
	{% if isHook %}
	{% set first = api.name | first %}
	export function use{{ api.name | replace(first, first | upper) }} (hookConfig?: Config) {
		return useRequest({{ api.name }}, ...mergeHookConfig(hookConfig || {}));
	}
	{% endif %}
{% endfor %}
